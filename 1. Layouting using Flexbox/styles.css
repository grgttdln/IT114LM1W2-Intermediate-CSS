.container {
    max-width: 1200px;
    margin: auto auto;
}

.box {
    width: 50px;
    height: 50px;
    margin: 5px;
    background-color: #f2f2f2;
    border: 1px solid #ccc;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 24px;
}

.box.tall {
    height: 100px;
}

.box.wide {
    width: 100px;
}


.red{
    background-color: red;
}

.blue{
    background-color: blue;
}

.green{
    background-color: green;
}


/* TODO 1 */
.todo-1-container {
    /* TODO 1.1.1 Set the display of this div to flex*/
    display: flex;
    
    /* TODO 1.1.2 Set the flex direction to row. Then set it to column. What's the difference?*/
    flex-direction: column;
    /*
        Answer: The flex-direction property specifies the orientation of the main axis, determining the placement of flexible items within a flex container.
                The main values include row, row-reverse, column, column-reverse.      
    */
    
    /* TODO 1.1.3 Set the flex direction to row. Then enable flex wrap. What does wrap do? */
    flex-direction: row;
    flex-wrap: wrap;
    /* 
        Answer: The flex-wrap property specifies whether the contents of the elements in the page wraps or not.
                The main values include nowrap, wrap, wrap-reverse.
    */
    
    /* Todo 1.1.4 Set the gap of the container to 10px. Now change it to 20px. What does gap do? */
    gap: 20px;
    /* 
        Answer: The gap property adds a literal size gap in between the contents.
    */

}

/* TODO 2 */
.todo-2-container{
    /* TODO 1.2.1 Set the display to flex and flex direction to row */
    display: flex;
    flex-direction: row;

    /* TODO 1.2.2 Justify the content to start, then end, then center. Make sure to see how the position of the divs change*/
    justify-content: center;

    /* TODO 1.2.3 Align the items start, then end, then center. Make sure to see how the position of the divs change*/
    align-items: center;

    /* TODO 1.2.4 Set the flex direction to column and play around with justify-content and align-items */
    flex-direction: column;
}

/* TODO 3 */
.todo-3-container{
    /* Todo 1.3.1 Set the display to flex and align items center */
    display: flex;
    align-items: center;
}

/* Select the red box */
.todo-3-container .red {
    /* Todo 1.3.2 Align this item to start. Try out the other possible values. What happens? */
    align-items: end;
    /* 
        Answer: The align-items property establishes the default alignment for elements within a flexbox or grid container.
                Some of the main values include stretch, flex-start, flex-end, center, baseline.
    */
}

/* Select the green box */
.todo-3-container .green {
    /* Todo 1.3.3 Set flex grow to 1 */
    flex-grow: 1;
}

/* Select the blue box */
.todo-3-container .blue {
    /* Todo 1.3.4 Set flex grow to 2. Try out the other values. What happens? */
    flex-grow: 3;
    /* 
        Answer: The flex-grow property sets the flex grow factor within a flex container, with higher values causing greater expansion compared to items with lower values. 
    */
}

/* TODO 4 */
.todo-4-container{
    /* Set the display to flex */
    display: flex;
}

/* Select the red box */
.todo-4-container .red {
    /* Set margin left to auto.  */
    margin-left: auto;
}

/* Select the green box */
.todo-4-container .green {
    /* Set margin right to auto */
    margin-right: auto;
}

/* Select the blue box */
.todo-4-container .blue {
    /* Set the order to  1. Try chaging the order of the other divs. What does order do?*/
    order: -1;
    /* 
        Answer: The order property changes the position of the object based on the given value.
    */
}




